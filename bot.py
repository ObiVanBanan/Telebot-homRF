import os
import telebot
import requests
from bs4 import BeautifulSoup as bs
import pandas as pd
import json
# from tqdm import tqdm 
import time
import logging

logging.basicConfig(level=logging.INFO, filename='bot_log.log', filemode='w',
                    format="%(asctime)s %(levelname)s %(message)s")

#–û—Å–Ω–æ–≤–Ω–æ–π
bot = telebot.TeleBot('token')
URL_TEMPLATE = 'https://–Ω–∞—à.–¥–æ–º.—Ä—Ñ/—Å–µ—Ä–≤–∏—Å—ã/–∫–∞—Ç–∞–ª–æ–≥-–Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫/—Å–ø–∏—Å–æ–∫-–æ–±—ä–µ–∫—Ç–æ–≤/—Å–ø–∏—Å–æ–∫?objStatus=0&page=0&limit=10'
user_agent = {
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36 OPR/97.0.0.0 (Edition Yx GX)'
}

def get_last_page():
    '''–ü–æ–ª—É—á–∞–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞'''
    result = requests.get(url=URL_TEMPLATE, headers=user_agent)
    soup = bs(result.text, 'html.parser')
    ip = soup.find_all('a', class_='pagination-item')
    page_list = []
    for i in ip:
        page_list.append(i.text)
    return page_list[-1]

def get_data(page):
    '''–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON'''
    url = f'https://xn--80az8a.xn--d1aqf.xn--p1ai/%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81%D1%8B/api/kn/object?offset={page}0&limit=10&sortField=devId.devShortCleanNm&sortType=asc&objStatus=0'
    result = requests.get(url=url, headers=user_agent)
    return result

def cline(file):
    '''–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É'''
    list_fullName = []
    list_groupName = []
    df = pd.read_excel(file)

    #–ò–∑ –∫–æ–ª–æ–Ω–∫–∏ developer –±–µ—Ä–µ—Ç fullName –∏ groupName
    for n, name in enumerate(df['developer']):
        try:
            name = eval(name)
        except Exception as exc:
            pass

        try:
            list_fullName.append(name['fullName'])
        except Exception as exc:
            list_fullName.append('')
            pass
        try:
            list_groupName.append(name['groupName'])
        except Exception as exc:
            list_groupName.append('')
            pass
    #–ò–∑ –∫–æ–ª–æ–Ω–∫–∏ objReady100PercDt –±–µ—Ä–µ—Ç –¥–∞—Ç—É –∏ –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–µ—Ç –µ–µ
    for n, data in enumerate(df['objReady100PercDt']):
        year = data[:4]
        day = data[-2:]
        month = data[5:7]

        data = day + '.' + month + '.' + year
        df['objReady100PercDt'][n] = data

    #–°–æ–∑–¥–∞–µ—Ç 2 –∫–æ–ª–æ–Ω–∫–∏ fullName –∏ groupName, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–º–∏
    df.insert(loc= 2 , column='fullName', value=list_fullName)
    df.insert(loc= 2 , column='groupName', value=list_groupName)

    #–£–¥–∞–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ developer –∏ Unnamed: 0
    df.drop(['developer', 'Unnamed: 0'], axis=1, inplace=True)

    #–ü–µ—Ä–µ–º–∏–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏
    df.rename(columns={
        'objId': 'ID',
        'rpdRegionCd': '–†–µ–≥–∏–æ–Ω',
        'objAddr': '–ê–¥—Ä–µ—Å',
        'objFloorMax': '–ß–∏—Å–ª–æ —ç—Ç–∞–∂–µ–π',
        'objReady100PercDt': '–í–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é',
        'objSquareLiving': '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å, –º¬≤',
        'fullName': '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫',
        'groupName': '–ì—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π',
        'rpdNum': '–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è',
                    }, inplace=True)

    #–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª
    df.to_excel(file)

def main():
    millisec = time.time_ns()
    file = 'data' + str(millisec) + '.xlsx'
    #–ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    last_page = get_last_page()

    #–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª data.xlsx
    with open(file, 'w', encoding='utf-8') as f:
        f.close()

    #–°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    data = pd.DataFrame(columns= [
                                'Unnamed: 0','objId','developer',
                                'rpdRegionCd','objAddr','objFloorMax',
                                'objReady100PercDt','objSquareLiving',
                                'rpdNum',
                                ])
    data.to_excel(file)
    df_1 = pd.read_excel(file)

    for page in range(0, int(last_page)):

        #–ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        ip = get_data(str(page))

        #–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ —Å–ø–∏—Å–æ–∫
        js = json.loads(ip.text)

        #–°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        df_2 = pd.DataFrame(js['data']['list'])

        #–î–µ–ª–∞–µ–º –æ–±—â–∏–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏–∑ df_1 –∏ df_2
        df_1 = pd.concat([df_1, df_2], join='inner')

    df_1.to_excel(file)

    cline(file)

    return file

#–û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start"])
def bd_home(message):

    bot.send_message(message.from_user.id,'–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—Éüë®‚Äçüíª')
    bot.send_message(message.from_user.id,'–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-10 –º–∏–Ω—É—Ç‚è≥')

    try:
        logging.info('–í–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É')
        file = main()

        #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        bot.send_document(message.chat.id,open(file,"rb"))

        #–£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        os.remove(file)
        logging.info('–û—Ç—Ä–∞–±–æ—Ç–∞–ª')
    except Exception as exc:
        bot.send_message(message.from_user.id,'–û—à–∏–±–∫–∞!‚ùå')
        logging.error("Exception", exc_info=True)
        pass

@bot.message_handler(commands=["log_info"])
def log_info(message):

    bot.send_message(message.from_user.id,'–í–æ–∑–≤—Ä–∞—â–∞—é –ª–æ–≥–∏üë®‚Äçüíª')

    try:
        bot.send_document(message.chat.id,open('bot_log.log','rb'))
    except Exception as exc:
        print(exc)
        pass

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as exc:
        logging.error("Exception", exc_info=True)
        time.sleep(15)